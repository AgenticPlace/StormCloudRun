# ./cloudbuild.yaml

# This file defines the steps for Google Cloud Build to automatically build,
# package, and deploy the full-stack StormCloudRun application.

steps:
  # Step 1: Install all dependencies from the root package.json for all workspaces.
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install']
    id: 'Install-All-Dependencies'

  # Step 2: Build the production-ready frontend assets (HTML, CSS, JS).
  - name: 'gcr.io/cloud-builders/npm'
    args: ['run', 'build']
    id: 'Build-Frontend'
    waitFor: ['Install-All-Dependencies']

  # Step 3: Copy the built frontend artifacts into the backend's 'public' directory.
  - name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Packaging frontend build into backend/public..."
        mkdir -p backend/public
        cp -r dist/* backend/public/
        echo "Packaging complete."
    id: 'Package-Frontend-with-Backend'
    waitFor: ['Build-Frontend']

  # Step 4: Install *only* production backend dependencies inside the backend folder.
  # This step is critical for a lean and secure source-based deployment.
  - name: 'gcr.io/cloud-builders/npm'
    args: ['install', '--omit=dev']
    dir: 'backend' # Run this command inside the 'backend' directory.
    id: 'Install-Backend-Dependencies'
    waitFor: ['Package-Frontend-with-Backend']

  # Step 5: Deploy the backend service to Cloud Run using its source code.
  # Cloud Run will use Google's Node.js Buildpack to create the container automatically.
  # This is the modern, Dockerfile-less approach.
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      - 'run'
      - 'deploy'
      - 'stormcloudrun'           # The name of your Cloud Run service.
      - '--source=./backend'      # Point to the backend source code directory.
      - '--region=us-west1'       # Your specified service region.
      - '--platform=managed'
      - '--allow-unauthenticated' # Makes the service publicly accessible.
      - '--port=8080'
      # Set Production Environment Variables directly in the deployment command.
      # The '^:^' delimiter safely handles special characters in URLs.
      - >-
        --set-env-vars=^:^NODE_ENV=production:FRONTEND_URL=https://stormcloudrun-117975713968.us-west1.run.app:BACKEND_URL=https://stormcloudrun-117975713968.us-west1.run.app:GOOGLE_CLIENT_ID=117975713968-jce1p2f6s9b5gmvou0m7i54asdhhie0v.apps.googleusercontent.com:GITHUB_CLIENT_ID=Ov23liLQ8WS0hownE7hv
      # Link secrets from Secret Manager to the service. This is the most secure method.
      # The syntax is 'ENV_VAR_NAME=SECRET_NAME:latest'.
      - >-
        --set-secrets=SESSION_SECRET=SESSION_SECRET:latest,ENCRYPTION_KEY=ENCRYPTION_KEY:latest,GOOGLE_CLIENT_SECRET=oauth-client-secret:latest,GITHUB_CLIENT_SECRET=github-client-secret:latest
    id: 'Deploy-to-Cloud-Run'
    waitFor: ['Install-Backend-Dependencies'] # This is the final step in the build.

# The service account that Cloud Build will use to execute these steps.
# It MUST have the 'Cloud Run Admin' and 'IAM Service Account User' roles.
# The 'Secret Manager Secret Accessor' role is also required for the service itself, but is set on the secrets directly.
serviceAccount: 'projects/eternal-delight-435801-c0/serviceAccounts/117975713968-compute@developer.gserviceaccount.com'
